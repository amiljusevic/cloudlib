
cloudlib.config_file package
****************************


cloudlib.config_file.parse_ini module
=====================================

Example Usage:

>>> # In your shell create a file named .example.ini in your home folder
>>> # dd sections to the file IE:
>>> # [default]
>>> # key = value

>>> config = ConfigurationSetup(name='example')
>>> default_args = config.config_args(section='default')
>>> print(default_args)
... {'key': 'value'}

class class cloudlib.config_file.parse_ini.ConfigurationSetup(name, log_name='cloudlib.config_file.parse_ini')

   Bases: "object"

   check_perms(perms='0600, 0400')

      Check and enforce the permissions of the config file.

      Enforce permission on a provided configuration file. This will
      check and see if the permission are set based on the permission
      octet as set in the "perms" value. "perms" is a comma separated
      list of acceptable perms in octal form. Defaults permissions to,
      0600 and 0400.

      Parameters:
         **perms** -- "str"

   config_args(section='default')

      Loop through the configuration file and set all of our values.

      Note:
         that anything can be set as a "section" in the argument file.
         If a section does not exist an empty dict will be returned.

      Parameters:
         **section** -- "str"

      Returns:
         "dict"

   load_config(path=None, home=False, ext='ini')

      Return the full path to a configuration file.

      This will look for configuration files in the "full_path", in
      the users home folder, or in a config directory in "/etc".  If
      you set *home=True*, the system will look for a "hidden"
      configuration file in the executing users $HOME folder.

      The precedence is as follows:
         full_path/name.ini /home/$USER/.name.ini /etc/name/name.ini

      Parameters:
         * **path** -- "str"

         * **home** -- "bol"

         * **ext** -- "str"

      Returns:
         "str"


Module contents
===============
